<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.autotrade.dao.TBookingDao">
	<resultMap id="BaseResultMap" type="com.autotrade.entity.TBooking">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="buying_id" property="buyingId" jdbcType="BIGINT" />
		<result column="vehicle_code" property="vehicleCode" jdbcType="VARCHAR" />
		<result column="number" property="number" jdbcType="INTEGER" />
		<result column="deposit" property="deposit" jdbcType="DECIMAL" />
		<result column="time" property="time" jdbcType="DATE" />
		<result column="business" property="business" jdbcType="VARCHAR" />
		<result column="single_person" property="singlePerson"
			jdbcType="VARCHAR" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="DATE" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, buying_id, vehicle_code, number, deposit, time, business,
		single_person, remark,
		create_time
	</sql>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from t_booking
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from t_booking
		where id = #{id,jdbcType=BIGINT}
	</delete>

	<insert id="insert" parameterType="com.autotrade.entity.TBooking">
		insert into t_booking (id, buying_id, vehicle_code,
		number, deposit, time,
		business, single_person, remark
		)
		values (#{id,jdbcType=BIGINT}, #{buyingId,jdbcType=BIGINT},
		#{vehicleCode,jdbcType=VARCHAR},
		#{number,jdbcType=INTEGER}, #{deposit,jdbcType=DECIMAL}, #{time,jdbcType=DATE},
		#{business,jdbcType=VARCHAR}, #{singlePerson,jdbcType=VARCHAR},
		#{remark,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.autotrade.entityVo.bookingVo">
		insert into t_booking
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="id != null">
				buying_id,
			</if>
			<if test="vehicleCode != null">
				vehicle_code,
			</if>
			<if test="number != null">
				number,
			</if>
			<if test="deposit != null">
				deposit,
			</if>
			<if test="time != null">
				time,
			</if>
			<if test="business != null">
				business,
			</if>
			<if test="singlePerson != null">
				single_person,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="buyingId != null">
				#{buyingId,jdbcType=BIGINT},
			</if>
			<if test="vehicleCode != null">
				#{vehicleCode,jdbcType=VARCHAR},
			</if>
			<if test="number != null">
				#{number,jdbcType=INTEGER},
			</if>
			<if test="deposit != null">
				#{deposit,jdbcType=DECIMAL},
			</if>
			<if test="time != null">
				#{time,jdbcType=DATE},
			</if>
			<if test="business != null">
				#{business,jdbcType=VARCHAR},
			</if>
			<if test="singlePerson != null">
				#{singlePerson,jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=DATE},
			</if>
		</trim>
	</insert>

	<update id="updateByExampleSelective" parameterType="map">
		update t_booking
		<set>

			<if test="record.buyingId != null">
				buying_id = #{record.buyingId,jdbcType=BIGINT},
			</if>
			<if test="record.vehicleCode != null">
				vehicle_code = #{record.vehicleCode,jdbcType=VARCHAR},
			</if>
			<if test="record.number != null">
				number = #{record.number,jdbcType=INTEGER},
			</if>
			<if test="record.deposit != null">
				deposit = #{record.deposit,jdbcType=DECIMAL},
			</if>
			<if test="record.time != null">
				time = #{record.time,jdbcType=DATE},
			</if>
			<if test="record.business != null">
				business = #{record.business,jdbcType=VARCHAR},
			</if>
			<if test="record.singlePerson != null">
				single_person = #{record.singlePerson,jdbcType=VARCHAR},
			</if>
			<if test="record.remark != null">
				remark = #{record.remark,jdbcType=VARCHAR},
			</if>

		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update t_booking
		set id = #{record.id,jdbcType=BIGINT},
		buying_id = #{record.buyingId,jdbcType=BIGINT},
		vehicle_code = #{record.vehicleCode,jdbcType=VARCHAR},
		number = #{record.number,jdbcType=INTEGER},
		deposit = #{record.deposit,jdbcType=DECIMAL},
		time = #{record.time,jdbcType=DATE},
		business = #{record.business,jdbcType=VARCHAR},
		single_person = #{record.singlePerson,jdbcType=VARCHAR},
		remark = #{record.remark,jdbcType=VARCHAR},
		create_time = #{record.createTime,jdbcType=DATE}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="map">
		update t_booking
		<set>
			<if test="buyingId != null">
				buying_id = #{buyingId,jdbcType=BIGINT},
			</if>
			<if test="vehicleCode != null">
				vehicle_code = #{vehicleCode,jdbcType=VARCHAR},
			</if>
			<if test="number != null">
				number = #{number,jdbcType=INTEGER},
			</if>
			<if test="deposit != null">
				deposit = #{deposit,jdbcType=DECIMAL},
			</if>
			<if test="time != null">
				time = #{time,jdbcType=DATE},
			</if>
			<if test="business != null">
				business = #{business,jdbcType=VARCHAR},
			</if>
			<if test="singlePerson != null">
				single_person = #{singlePerson,jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR}
			</if>

		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.autotrade.entity.TBooking">
		update t_booking
		set buying_id = #{buyingId,jdbcType=BIGINT},
		vehicle_code = #{vehicleCode,jdbcType=VARCHAR},
		number = #{number,jdbcType=INTEGER},
		deposit = #{deposit,jdbcType=DECIMAL},
		time = #{time,jdbcType=DATE},
		business = #{business,jdbcType=VARCHAR},
		single_person = #{singlePerson,jdbcType=VARCHAR},
		remark = #{remark,jdbcType=VARCHAR},
		create_time = #{createTime,jdbcType=DATE}
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="selectAllbook" resultType="com.autotrade.entityVo.bookingVo">
		select b.id id,c.name name,c.phone phone,c.address address,
		d.vehicle_code vehicleCode,d.type vehicle_type,
		d.type_number brand,d.address place,
		d.money selling_price,b.number number,
		b.deposit deposit, b.time time,
		b.business business,b.single_person singlePerson,
		b.remark remark,b.create_time create_time
		from t_booking b
		join t_vehichile_detailed d
		on b.vehicle_code=d.vehicle_code
		join t_buying_customers c
		on b.buying_id=c.id limit #{page},#{limit}
	</select>

	<select id="selectAllbookbyId" resultType="com.autotrade.entityVo.bookingVo">
		select b.id id,b.buying_id buyingId,c.name name,c.phone phone,c.address
		address,
		d.vehicle_code vehicleCode,d.type vehicle_type,
		d.type_number brand,d.address place,
		d.money selling_price,b.number number,
		b.deposit deposit, b.time time,
		b.business business,b.single_person singlePerson,
		b.remark remark
		from t_booking b
		join t_vehichile_detailed d
		on b.vehicle_code=d.vehicle_code
		join t_buying_customers c
		on b.buying_id=c.id
		WHERE b.id=#{c_id}
	</select>

	<select id="countbook" resultType="java.lang.Integer">
		select
		COUNT(*)
		from t_booking
	</select>

	<!-- 混合查询 -->
	<select id="selectAllbyfield" resultType="com.autotrade.entityVo.bookingVo">
		select b.id id,b.buying_id buyingId,b.time time,
		c.name name,c.phone phone,c.address address,
		d.vehicle_code vehicleCode,d.type vehicle_type,
		d.type_number brand
		from t_booking b
		join t_vehichile_detailed d
		on b.vehicle_code=d.vehicle_code
		join t_buying_customers c
		on b.buying_id=c.id
		where c.name LIKE CONCAT('%',#{s},'%')
		or c.phone LIKE CONCAT('%',#{s},'%')
		or c.address LIKE CONCAT('%',#{s},'%')
		or d.type LIKE CONCAT('%',#{s},'%')
		or d.type_number LIKE CONCAT('%',#{s},'%')
		limit #{star},#{limit}
	</select>
	<!-- 信息数量 -->
	<select id="SelectCountbyfield" resultType="java.lang.Integer">
		select
		COUNT(*)
		from t_booking b
		join t_vehichile_detailed d
		on b.vehicle_code=d.vehicle_code
		join t_buying_customers c
		on b.buying_id=c.id
		where c.name LIKE CONCAT('%',#{s},'%')
		or c.phone LIKE CONCAT('%',#{s},'%')
		or c.address LIKE CONCAT('%',#{s},'%')
		or d.type LIKE CONCAT('%',#{s},'%')
		or d.type_number LIKE CONCAT('%',#{s},'%')
	</select>

</mapper>