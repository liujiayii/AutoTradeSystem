package com.autotrade.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.autotrade.entity.BuyingCustomer;
import com.autotrade.entity.ByStages;
import com.autotrade.entity.DetailsInstallments;
import com.autotrade.service.BuyingCustomerService;
import com.autotrade.service.ByStagesService;
import com.autotrade.service.DetailsInstallmentsService;
import com.autotrade.utils.JsonUtil;

/**
 * 分期表控制层
 *
 * @ClassName: ByStagesController

 * @description 
 *
 * @author lujinpeng
 * @createDate 2019年1月29日-上午11:18:35
 */
@RestController
@RequestMapping("/byStages")
public class ByStagesController {

	//分期表接口
	@Autowired
	private ByStagesService byStagesService;
	//分期详情表接口
	@Autowired
	private DetailsInstallmentsService detailsInstallmentsService;
	//买车客户表接口
	@Autowired
	private BuyingCustomerService buyingCustomerService;
	
	/**
	 * 显示分期管理页数据
	 *
	 * @Title: showByStages
	
	 * @description 
	 *
	 * @param page 当前页
	 * @param size 每页显示条数
	 * @return String
	 *
	 * @author lujinpeng
	 * @createDate 2019年1月29日-上午11:33:15
	 */
	@RequestMapping("/showByStages")
	public String showByStages (Integer page, Integer limit) {
		if(page <= 0 || page == null){
			page = 1;
		}
		page = (page - 1) * limit;
		
		Map<String, Object> map = new HashMap<> ();
		map.put("page", page);
		map.put("size", limit);
		
		return byStagesService.selectByLimit(map);
	}
	
	/**
	 * 显示分期详情信息
	 *
	 * @Title: showDetailsByStages
	
	 * @description 
	 *
	 * @param id
	 * @param page
	 * @param limit
	 * @return 
	   
	 * String
	 *
	 * @author lujinpeng
	 * @createDate 2019年1月30日-下午4:26:35
	 */
	@RequestMapping("/showDetailsByStages")
	public String showDetailsByStages(Integer id, Integer page, Integer limit) {
		if(page <= 0 || page == null){
			page = 1;
		}
		page = (page - 1) * limit;
		
		Map<String, Object> map = new HashMap<> ();
		map.put("id", id);
		map.put("page", page);
		map.put("size", limit);
		
		return detailsInstallmentsService.selectDetailsInstallments(map);
	}	
	
	/**
	 * 显示分期数据对应买车客户信息
	 *
	 * @Title: showBuyingCustomer
	
	 * @description 
	 *
	 * @param id 分期表主键id
	 * @return 
	 * String
	 *
	 * @author lujinpeng
	 * @createDate 2019年1月30日-下午5:07:40
	 */
	@RequestMapping("/showBuyingCustomer")
	public String showBuyingCustomer(Long id) {
		
		return byStagesService.selectBuyingCustomer(id);
	}
	
	/**
	 * 分期页面搜索接口
	 *
	 * @Title: searchByStages
	
	 * @description 
	 *
	 * @param searchField 搜索数据（电话或者姓名）
	 * @param page 当前页
	 * @param limit 每页显示条数
	 * @return String
	 *
	 * @author lujinpeng
	 * @createDate 2019年1月31日-上午11:02:54
	 */
	@RequestMapping("/searchByStages")
	public String searchByStages(String searchField, Integer page, Integer limit) {
		if(page <= 0 || page == null){
			page = 1;
		}
		page = (page - 1) * limit;
		
		Map<String, Object> map = new HashMap<> ();
		// 判断搜索参数是否为数字 
		if (Pattern.compile("[1-9]{1,11}").matcher(searchField).matches()) {
			map.put("phone", searchField);
		} else {
			map.put("name", searchField);
		}
		map.put("page", page);
		map.put("size", limit);
		
		return byStagesService.selectBySearchField(map);
	}
	
	/**
	 * 新增分期数据
	 *
	 * @Title: insertByStages
	
	 * @description 
	 *
	 * @param map
	 * @return String
	 *
	 * @author lujinpeng
	 * @createDate 2019年1月31日-下午3:06:34
	 */
	@RequestMapping("/insertByStages")
	public String insertByStages(Map<String, Object> map) {
		
		BuyingCustomer buyingCustomer = (BuyingCustomer)map.get("buyingCustomer");
		ByStages byStages = (ByStages)map.get("byStages");
		DetailsInstallments detailsInstallments = (DetailsInstallments)map.get("detailsInstallments");
		String phone = buyingCustomer.getPhone();
		List<BuyingCustomer> buyingCustomerList = null;
		Long buyingId = 0L;
		int code = 1;
		String msg = "插入成功";
		
		try {
			buyingCustomerList = buyingCustomerService.selectByPhone(phone);
			
			// 判断买车客户表是否存在当前客户
			if (buyingCustomerList.size() == 0) {
				buyingCustomerService.insertSelective(buyingCustomer);
				buyingId = buyingCustomerService.selectByPhone(phone).get(0).getId();
				byStages.setBuyingId(buyingId);
				detailsInstallments.setBuyingId(buyingId);
			} else {
				buyingId = buyingCustomerList.get(0).getId();
				byStages.setBuyingId(buyingId);
			}
			
			// 插入数据到分期表
			byStagesService.insertAll(byStages);
			// 插入数据到分期详情表
			detailsInstallmentsService.insertAll(detailsInstallments);
		} catch (Exception e) {
			e.printStackTrace();
			code = -1;
			msg = "插入失败";
		}
		
		return JsonUtil.getResponseJson(code, msg, null, null);
	}
	
}
